name: Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  FORCE_COLOR: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Upgrade nox and uv
        run: |
          python -m pip install --upgrade 'nox[uv]'
          nox --version
          uv --version

      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-3|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Lint code
        run: nox -s lint

  datachain:
    timeout-minutes: 25
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest-8-cores]
        pyv: ['3.9', '3.10', '3.11', '3.12']
        include:
          - os: macos-latest
            pyv: '3.9'
          - os: macos-latest
            pyv: '3.12'
          - os: windows-latest-8-cores
            pyv: '3.9'
          - os: windows-latest-8-cores
            pyv: '3.12'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.pyv }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyv }}
          cache: 'pip'

      - name: Upgrade nox and uv
        run: |
          python -m pip install --upgrade 'nox[uv]'
          nox --version
          uv --version

      - name: Skip flaky azure, gs remotes on macOS
        if: runner.os == 'macOS'
        run: echo 'DISABLE_REMOTES_ARG=--disable-remotes=azure,gs' >> "$GITHUB_ENV"

      - name: Skip all remotes on Windows
        if: runner.os == 'Windows'
        run: echo 'DISABLE_REMOTES_ARG=--disable-remotes=all' >> $env:GITHUB_ENV

      - name: Run tests
        run: nox -s tests-${{ matrix.pyv }} -- $DISABLE_REMOTES_ARG
        shell: bash

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: datachain

      - name: Build package
        run: nox -s build

      - name: Build docs
        run: nox -s docs


  studio:
    if: '!github.event.pull_request.head.repo.fork'
    runs-on: ubuntu-latest-16-cores
    strategy:
      matrix:
        pyv: ['3.12']
        group: [1, 2, 3, 4, 5, 6]
    services:
      postgres:
        image: postgres:16.3
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_DB: database
          POSTGRES_HOST_AUTH_METHOD: trust
      clickhouse:
        image: clickhouse/clickhouse-server:24
        ports:
          - 8123:8123
          - 9010:9000
        env:
          CLICKHOUSE_DB: studio_local_db
          CLICKHOUSE_USER: studio_local
          CLICKHOUSE_PASSWORD: ch123456789!
          CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      redis:
        image: redis:7.2.5
        ports:
          - 6379:6379
    steps:

      - name: Check out Studio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: iterative/studio
          ref: develop
          token: ${{ secrets.ITERATIVE_STUDIO_READ_ACCESS_TOKEN }}

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          path: './backend/datachain'
          fetch-depth: 0

      - name: Set up Python ${{ matrix.pyv }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyv }}
          cache: 'pip'

      - name: Install uv
        run: |
          python -m pip install --upgrade uv
          uv --version

      - name: Install dependencies
        run: uv pip install --system ./backend/datachain_server[tests] ./backend/datachain[tests]

      - name: Run tests
        # Generate `.test_durations` file with `pytest --store-durations --durations-path ../.github/.test_durations ...`
        run: >
          pytest
          --config-file=pyproject.toml -rs
          --splits=6 --group=${{ matrix.group }} --durations-path=../../.github/.test_durations
          tests ../datachain/tests
        working-directory: backend/datachain_server
